package $!{package.ServiceImpl};

#if($!{cfg.generatorType} == 'BASIC')
import $!{superServiceImplClassPackage};
import $!{package.Entity}.$!{entity};
import $!{package.Mapper}.$!{table.mapperName};
import $!{package.Service}.$!{table.serviceName};
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
#elseif($!{cfg.generatorType} == 'FULL')
import $!{superServiceImplClassPackage};
import $!{cfg.businessException};
import $!{cfg.orderByItem};
import $!{cfg.paging};
import $!{cfg.pagingUtilPath};
import $!{cfg.dtoPath};
import $!{package.Entity}.$!{entity};
import $!{package.Mapper}.$!{table.mapperName};
import $!{cfg.queryPath};
import $!{package.Service}.$!{table.serviceName};
import $!{cfg.voPath};
#if($!{cfg.generatorApi})
import $!{cfg.appQueryPath};
import $!{cfg.appVoPath};
#end
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.List;
#end

/**
 * $!{table.comment} 服务实现类
 *
 * @author $!{author}
 * @since $!{date}
 */
@Slf4j
@Service
public class $!{table.serviceImplName} extends $!{superServiceImplClass}<$!{table.mapperName}, $!{entity}> implements $!{table.serviceName} {

    @Autowired
    private $!{table.mapperName} $!{cfg.mapperObjectName};

#if($!{cfg.generatorType} == 'FULL')
    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean add$!{entity}($!{cfg.dtoName} $!{cfg.dtoObjectName}) throws Exception {
        $!{entity} $!{cfg.entityObjectName} = new $!{entity}();
        BeanUtils.copyProperties($!{cfg.dtoObjectName}, $!{cfg.entityObjectName});
        return save($!{cfg.entityObjectName});
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean update$!{entity}($!{cfg.dtoName} $!{cfg.dtoObjectName}) throws Exception {
        Long $!{cfg.pkIdName} = $!{cfg.dtoObjectName}.get$!{cfg.pascalPkIdName}();
        $!{entity} $!{cfg.entityObjectName} = getById($!{cfg.pkIdName});
        if ($!{cfg.entityObjectName} == null) {
            throw new BusinessException("$!{table.comment}不存在");
        }
        BeanUtils.copyProperties($!{cfg.dtoObjectName}, $!{cfg.entityObjectName});
    #if($!{cfg.pascalUpdateTimeColumnName})
        $!{cfg.entityObjectName}.set$!{cfg.pascalUpdateTimeColumnName}(new Date());
    #end
        return updateById($!{cfg.entityObjectName});
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean delete$!{entity}(Long $!{cfg.pkIdName}) throws Exception {
        return removeById($!{cfg.pkIdName});
    }

    @Override
    public $!{cfg.voName} get$!{entity}ById(Long $!{cfg.pkIdName}) throws Exception {
        return $!{cfg.mapperObjectName}.get$!{entity}ById($!{cfg.pkIdName});
    }

    @Override
    public Paging<$!{cfg.voName}> get$!{entity}Page($!{cfg.queryName} query) throws Exception {
        #if($!{cfg.defaultOrderColumnName})
        PagingUtil.handlePage(query, OrderByItem.desc("$!{cfg.defaultOrderColumnName}"));
        #else
        PagingUtil.handlePage(query);
        #end
        List<$!{cfg.voName}> list = $!{cfg.mapperObjectName}.get$!{entity}Page(query);
        Paging<$!{cfg.voName}> paging = new Paging<>(list);
        return paging;
    }

#if($!{cfg.generatorApi})
    @Override
    public $!{cfg.appVoName} get$!{cfg.appEntityName}ById(Long $!{cfg.pkIdName}) throws Exception {
        return $!{cfg.mapperObjectName}.get$!{cfg.appEntityName}ById($!{cfg.pkIdName});
    }

    @Override
    public Paging<$!{cfg.appVoName}> get$!{cfg.appEntityName}Page($!{cfg.appQueryName} query) throws Exception {
        #if($!{cfg.defaultOrderColumnName})
        PagingUtil.handlePage(query, OrderByItem.desc("$!{cfg.defaultOrderColumnName}"));
        #else
        PagingUtil.handlePage(query);
        #end
        List<$!{cfg.appVoName}> list = $!{cfg.mapperObjectName}.get$!{cfg.appEntityName}Page(query);
        Paging<$!{cfg.appVoName}> paging = new Paging<>(list);
        return paging;
    }

#end
#end
}
